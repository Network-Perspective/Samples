# coding: utf-8

"""
    Network Perspective

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: ext-v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from np_client.models.hashed_interaction_label import HashedInteractionLabel
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class HashedInteraction(BaseModel):
    """
    
    """ # noqa: E501
    interaction_id: Optional[StrictStr] = Field(default=None, alias="interactionId")
    when: Optional[datetime] = None
    source_ids: Optional[Dict[str, StrictStr]] = Field(default=None, alias="sourceIds")
    target_ids: Optional[Dict[str, StrictStr]] = Field(default=None, alias="targetIds")
    event_id: Optional[StrictStr] = Field(default=None, alias="eventId")
    parent_event_id: Optional[StrictStr] = Field(default=None, alias="parentEventId")
    channel_id: Optional[StrictStr] = Field(default=None, alias="channelId")
    duration_minutes: Optional[StrictInt] = Field(default=None, alias="durationMinutes")
    label: Optional[List[HashedInteractionLabel]] = None
    __properties: ClassVar[List[str]] = ["interactionId", "when", "sourceIds", "targetIds", "eventId", "parentEventId", "channelId", "durationMinutes", "label"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of HashedInteraction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if interaction_id (nullable) is None
        # and model_fields_set contains the field
        if self.interaction_id is None and "interaction_id" in self.model_fields_set:
            _dict['interactionId'] = None

        # set to None if source_ids (nullable) is None
        # and model_fields_set contains the field
        if self.source_ids is None and "source_ids" in self.model_fields_set:
            _dict['sourceIds'] = None

        # set to None if target_ids (nullable) is None
        # and model_fields_set contains the field
        if self.target_ids is None and "target_ids" in self.model_fields_set:
            _dict['targetIds'] = None

        # set to None if event_id (nullable) is None
        # and model_fields_set contains the field
        if self.event_id is None and "event_id" in self.model_fields_set:
            _dict['eventId'] = None

        # set to None if parent_event_id (nullable) is None
        # and model_fields_set contains the field
        if self.parent_event_id is None and "parent_event_id" in self.model_fields_set:
            _dict['parentEventId'] = None

        # set to None if channel_id (nullable) is None
        # and model_fields_set contains the field
        if self.channel_id is None and "channel_id" in self.model_fields_set:
            _dict['channelId'] = None

        # set to None if label (nullable) is None
        # and model_fields_set contains the field
        if self.label is None and "label" in self.model_fields_set:
            _dict['label'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of HashedInteraction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "interactionId": obj.get("interactionId"),
            "when": obj.get("when"),
            "sourceIds": obj.get("sourceIds"),
            "targetIds": obj.get("targetIds"),
            "eventId": obj.get("eventId"),
            "parentEventId": obj.get("parentEventId"),
            "channelId": obj.get("channelId"),
            "durationMinutes": obj.get("durationMinutes"),
            "label": obj.get("label")
        })
        return _obj


