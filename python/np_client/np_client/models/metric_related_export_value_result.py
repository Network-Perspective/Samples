# coding: utf-8

"""
    Network Perspective

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: ext-v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class MetricRelatedExportValueResult(BaseModel):
    """
    MetricRelatedExportValueResult
    """ # noqa: E501
    period: Optional[StrictStr] = None
    value: Optional[Union[StrictFloat, StrictInt]] = None
    group_id: Optional[StrictStr] = Field(default=None, alias="groupId")
    client_group_id: Optional[StrictStr] = Field(default=None, alias="clientGroupId")
    group_name: Optional[StrictStr] = Field(default=None, alias="groupName")
    related_group_id: Optional[StrictStr] = Field(default=None, alias="relatedGroupId")
    related_client_group_id: Optional[StrictStr] = Field(default=None, alias="relatedClientGroupId")
    related_group_name: Optional[StrictStr] = Field(default=None, alias="relatedGroupName")
    category: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["period", "value", "groupId", "clientGroupId", "groupName", "relatedGroupId", "relatedClientGroupId", "relatedGroupName", "category"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of MetricRelatedExportValueResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if period (nullable) is None
        # and model_fields_set contains the field
        if self.period is None and "period" in self.model_fields_set:
            _dict['period'] = None

        # set to None if value (nullable) is None
        # and model_fields_set contains the field
        if self.value is None and "value" in self.model_fields_set:
            _dict['value'] = None

        # set to None if client_group_id (nullable) is None
        # and model_fields_set contains the field
        if self.client_group_id is None and "client_group_id" in self.model_fields_set:
            _dict['clientGroupId'] = None

        # set to None if group_name (nullable) is None
        # and model_fields_set contains the field
        if self.group_name is None and "group_name" in self.model_fields_set:
            _dict['groupName'] = None

        # set to None if related_client_group_id (nullable) is None
        # and model_fields_set contains the field
        if self.related_client_group_id is None and "related_client_group_id" in self.model_fields_set:
            _dict['relatedClientGroupId'] = None

        # set to None if related_group_name (nullable) is None
        # and model_fields_set contains the field
        if self.related_group_name is None and "related_group_name" in self.model_fields_set:
            _dict['relatedGroupName'] = None

        # set to None if category (nullable) is None
        # and model_fields_set contains the field
        if self.category is None and "category" in self.model_fields_set:
            _dict['category'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of MetricRelatedExportValueResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "period": obj.get("period"),
            "value": obj.get("value"),
            "groupId": obj.get("groupId"),
            "clientGroupId": obj.get("clientGroupId"),
            "groupName": obj.get("groupName"),
            "relatedGroupId": obj.get("relatedGroupId"),
            "relatedClientGroupId": obj.get("relatedClientGroupId"),
            "relatedGroupName": obj.get("relatedGroupName"),
            "category": obj.get("category")
        })
        return _obj


